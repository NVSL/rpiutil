# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_arduPi', [dirname(__file__)])
        except ImportError:
            import _arduPi
            return _arduPi
        if fp is not None:
            try:
                _mod = imp.load_module('_arduPi', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _arduPi = swig_import_helper()
    del swig_import_helper
else:
    import _arduPi
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SerialPi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SerialPi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SerialPi, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _arduPi.new_SerialPi()
        try: self.this.append(this)
        except: self.this = this
    def begin(self, *args): return _arduPi.SerialPi_begin(self, *args)
    def available(self): return _arduPi.SerialPi_available(self)
    def read(self): return _arduPi.SerialPi_read(self)
    def readBytes(self, *args): return _arduPi.SerialPi_readBytes(self, *args)
    def readBytesUntil(self, *args): return _arduPi.SerialPi_readBytesUntil(self, *args)
    def find(self, *args): return _arduPi.SerialPi_find(self, *args)
    def findUntil(self, *args): return _arduPi.SerialPi_findUntil(self, *args)
    def parseInt(self): return _arduPi.SerialPi_parseInt(self)
    def parseFloat(self): return _arduPi.SerialPi_parseFloat(self)
    def peek(self): return _arduPi.SerialPi_peek(self)
    def _print(self, *args): return _arduPi.SerialPi__print(self, *args)
    def println(self, *args): return _arduPi.SerialPi_println(self, *args)
    def write(self, *args): return _arduPi.SerialPi_write(self, *args)
    def flush(self): return _arduPi.SerialPi_flush(self)
    def setTimeout(self, *args): return _arduPi.SerialPi_setTimeout(self, *args)
    def end(self): return _arduPi.SerialPi_end(self)
    __swig_destroy__ = _arduPi.delete_SerialPi
    __del__ = lambda self : None;
SerialPi_swigregister = _arduPi.SerialPi_swigregister
SerialPi_swigregister(SerialPi)

class WirePi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WirePi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WirePi, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _arduPi.new_WirePi()
        try: self.this.append(this)
        except: self.this = this
    def begin(self): return _arduPi.WirePi_begin(self)
    def beginTransmission(self, *args): return _arduPi.WirePi_beginTransmission(self, *args)
    def write(self, *args): return _arduPi.WirePi_write(self, *args)
    def endTransmission(self): return _arduPi.WirePi_endTransmission(self)
    def requestFrom(self, *args): return _arduPi.WirePi_requestFrom(self, *args)
    def read(self, *args): return _arduPi.WirePi_read(self, *args)
    def read_rs(self, *args): return _arduPi.WirePi_read_rs(self, *args)
    __swig_destroy__ = _arduPi.delete_WirePi
    __del__ = lambda self : None;
WirePi_swigregister = _arduPi.WirePi_swigregister
WirePi_swigregister(WirePi)

class SPIPi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SPIPi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SPIPi, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _arduPi.new_SPIPi()
        try: self.this.append(this)
        except: self.this = this
    def begin(self): return _arduPi.SPIPi_begin(self)
    def end(self): return _arduPi.SPIPi_end(self)
    def setBitOrder(self, *args): return _arduPi.SPIPi_setBitOrder(self, *args)
    def setClockDivider(self, *args): return _arduPi.SPIPi_setClockDivider(self, *args)
    def setDataMode(self, *args): return _arduPi.SPIPi_setDataMode(self, *args)
    def chipSelect(self, *args): return _arduPi.SPIPi_chipSelect(self, *args)
    def setChipSelectPolarity(self, *args): return _arduPi.SPIPi_setChipSelectPolarity(self, *args)
    def transfer(self, *args): return _arduPi.SPIPi_transfer(self, *args)
    def transfernb(self, *args): return _arduPi.SPIPi_transfernb(self, *args)
    __swig_destroy__ = _arduPi.delete_SPIPi
    __del__ = lambda self : None;
SPIPi_swigregister = _arduPi.SPIPi_swigregister
SPIPi_swigregister(SPIPi)


def pinMode(*args):
  return _arduPi.pinMode(*args)
pinMode = _arduPi.pinMode

def digitalWrite(*args):
  return _arduPi.digitalWrite(*args)
digitalWrite = _arduPi.digitalWrite

def digitalRead(*args):
  return _arduPi.digitalRead(*args)
digitalRead = _arduPi.digitalRead

def analogRead(*args):
  return _arduPi.analogRead(*args)
analogRead = _arduPi.analogRead

def delay(*args):
  return _arduPi.delay(*args)
delay = _arduPi.delay

def delayMicroseconds(*args):
  return _arduPi.delayMicroseconds(*args)
delayMicroseconds = _arduPi.delayMicroseconds

def shiftIn(*args):
  return _arduPi.shiftIn(*args)
shiftIn = _arduPi.shiftIn

def shiftOut(*args):
  return _arduPi.shiftOut(*args)
shiftOut = _arduPi.shiftOut

def attachInterrupt(*args):
  return _arduPi.attachInterrupt(*args)
attachInterrupt = _arduPi.attachInterrupt

def detachInterrupt(*args):
  return _arduPi.detachInterrupt(*args)
detachInterrupt = _arduPi.detachInterrupt

def millis():
  return _arduPi.millis()
millis = _arduPi.millis

def getBoardRev():
  return _arduPi.getBoardRev()
getBoardRev = _arduPi.getBoardRev

def raspberryPinNumber(*args):
  return _arduPi.raspberryPinNumber(*args)
raspberryPinNumber = _arduPi.raspberryPinNumber

def getThreadIdFromPin(*args):
  return _arduPi.getThreadIdFromPin(*args)
getThreadIdFromPin = _arduPi.getThreadIdFromPin

def bcm2835_peri_read(*args):
  return _arduPi.bcm2835_peri_read(*args)
bcm2835_peri_read = _arduPi.bcm2835_peri_read

def bcm2835_peri_read_nb(*args):
  return _arduPi.bcm2835_peri_read_nb(*args)
bcm2835_peri_read_nb = _arduPi.bcm2835_peri_read_nb

def bcm2835_peri_write(*args):
  return _arduPi.bcm2835_peri_write(*args)
bcm2835_peri_write = _arduPi.bcm2835_peri_write

def bcm2835_peri_write_nb(*args):
  return _arduPi.bcm2835_peri_write_nb(*args)
bcm2835_peri_write_nb = _arduPi.bcm2835_peri_write_nb

def bcm2835_peri_set_bits(*args):
  return _arduPi.bcm2835_peri_set_bits(*args)
bcm2835_peri_set_bits = _arduPi.bcm2835_peri_set_bits

def bcm2835_gpio_fsel(*args):
  return _arduPi.bcm2835_gpio_fsel(*args)
bcm2835_gpio_fsel = _arduPi.bcm2835_gpio_fsel

def threadFunction(*args):
  return _arduPi.threadFunction(*args)
threadFunction = _arduPi.threadFunction
# This file is compatible with both classic and new-style classes.

cvar = _arduPi.cvar

