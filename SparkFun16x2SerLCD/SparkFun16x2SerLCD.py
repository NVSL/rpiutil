# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SparkFun16x2SerLCD', [dirname(__file__)])
        except ImportError:
            import _SparkFun16x2SerLCD
            return _SparkFun16x2SerLCD
        if fp is not None:
            try:
                _mod = imp.load_module('_SparkFun16x2SerLCD', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _SparkFun16x2SerLCD = swig_import_helper()
    del swig_import_helper
else:
    import _SparkFun16x2SerLCD
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class serLCD(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, serLCD, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, serLCD, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _SparkFun16x2SerLCD.new_serLCD()
        try: self.this.append(this)
        except: self.this = this
    def clear(self): return _SparkFun16x2SerLCD.serLCD_clear(self)
    def clearLine(self, *args): return _SparkFun16x2SerLCD.serLCD_clearLine(self, *args)
    def home(self): return _SparkFun16x2SerLCD.serLCD_home(self)
    def setBrightness(self, *args): return _SparkFun16x2SerLCD.serLCD_setBrightness(self, *args)
    def setSplash(self): return _SparkFun16x2SerLCD.serLCD_setSplash(self)
    def toggleSplash(self): return _SparkFun16x2SerLCD.serLCD_toggleSplash(self)
    def blink(self): return _SparkFun16x2SerLCD.serLCD_blink(self)
    def noBlink(self): return _SparkFun16x2SerLCD.serLCD_noBlink(self)
    def cursor(self): return _SparkFun16x2SerLCD.serLCD_cursor(self)
    def noCursor(self): return _SparkFun16x2SerLCD.serLCD_noCursor(self)
    def display(self): return _SparkFun16x2SerLCD.serLCD_display(self)
    def noDisplay(self): return _SparkFun16x2SerLCD.serLCD_noDisplay(self)
    def setCursor(self, *args): return _SparkFun16x2SerLCD.serLCD_setCursor(self, *args)
    def selectLine(self, *args): return _SparkFun16x2SerLCD.serLCD_selectLine(self, *args)
    def leftToRight(self): return _SparkFun16x2SerLCD.serLCD_leftToRight(self)
    def rightToLeft(self): return _SparkFun16x2SerLCD.serLCD_rightToLeft(self)
    def createChar(self, *args): return _SparkFun16x2SerLCD.serLCD_createChar(self, *args)
    def printCustomChar(self, *args): return _SparkFun16x2SerLCD.serLCD_printCustomChar(self, *args)
    __swig_destroy__ = _SparkFun16x2SerLCD.delete_serLCD
    __del__ = lambda self : None;
serLCD_swigregister = _SparkFun16x2SerLCD.serLCD_swigregister
serLCD_swigregister(serLCD)

# This file is compatible with both classic and new-style classes.


