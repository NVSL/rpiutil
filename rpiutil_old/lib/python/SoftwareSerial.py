# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SoftwareSerial', [dirname(__file__)])
        except ImportError:
            import _SoftwareSerial
            return _SoftwareSerial
        if fp is not None:
            try:
                _mod = imp.load_module('_SoftwareSerial', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _SoftwareSerial = swig_import_helper()
    del swig_import_helper
else:
    import _SoftwareSerial
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


_STDINT_H = _SoftwareSerial._STDINT_H
INT8_MIN = _SoftwareSerial.INT8_MIN
INT16_MIN = _SoftwareSerial.INT16_MIN
INT32_MIN = _SoftwareSerial.INT32_MIN
INT64_MIN = _SoftwareSerial.INT64_MIN
INT8_MAX = _SoftwareSerial.INT8_MAX
INT16_MAX = _SoftwareSerial.INT16_MAX
INT32_MAX = _SoftwareSerial.INT32_MAX
INT64_MAX = _SoftwareSerial.INT64_MAX
UINT8_MAX = _SoftwareSerial.UINT8_MAX
UINT16_MAX = _SoftwareSerial.UINT16_MAX
UINT32_MAX = _SoftwareSerial.UINT32_MAX
UINT64_MAX = _SoftwareSerial.UINT64_MAX
INT_LEAST8_MIN = _SoftwareSerial.INT_LEAST8_MIN
INT_LEAST16_MIN = _SoftwareSerial.INT_LEAST16_MIN
INT_LEAST32_MIN = _SoftwareSerial.INT_LEAST32_MIN
INT_LEAST64_MIN = _SoftwareSerial.INT_LEAST64_MIN
INT_LEAST8_MAX = _SoftwareSerial.INT_LEAST8_MAX
INT_LEAST16_MAX = _SoftwareSerial.INT_LEAST16_MAX
INT_LEAST32_MAX = _SoftwareSerial.INT_LEAST32_MAX
INT_LEAST64_MAX = _SoftwareSerial.INT_LEAST64_MAX
UINT_LEAST8_MAX = _SoftwareSerial.UINT_LEAST8_MAX
UINT_LEAST16_MAX = _SoftwareSerial.UINT_LEAST16_MAX
UINT_LEAST32_MAX = _SoftwareSerial.UINT_LEAST32_MAX
UINT_LEAST64_MAX = _SoftwareSerial.UINT_LEAST64_MAX
INT_FAST8_MIN = _SoftwareSerial.INT_FAST8_MIN
INT_FAST16_MIN = _SoftwareSerial.INT_FAST16_MIN
INT_FAST32_MIN = _SoftwareSerial.INT_FAST32_MIN
INT_FAST64_MIN = _SoftwareSerial.INT_FAST64_MIN
INT_FAST8_MAX = _SoftwareSerial.INT_FAST8_MAX
INT_FAST16_MAX = _SoftwareSerial.INT_FAST16_MAX
INT_FAST32_MAX = _SoftwareSerial.INT_FAST32_MAX
INT_FAST64_MAX = _SoftwareSerial.INT_FAST64_MAX
UINT_FAST8_MAX = _SoftwareSerial.UINT_FAST8_MAX
UINT_FAST16_MAX = _SoftwareSerial.UINT_FAST16_MAX
UINT_FAST32_MAX = _SoftwareSerial.UINT_FAST32_MAX
UINT_FAST64_MAX = _SoftwareSerial.UINT_FAST64_MAX
INTPTR_MIN = _SoftwareSerial.INTPTR_MIN
INTPTR_MAX = _SoftwareSerial.INTPTR_MAX
UINTPTR_MAX = _SoftwareSerial.UINTPTR_MAX
INTMAX_MIN = _SoftwareSerial.INTMAX_MIN
INTMAX_MAX = _SoftwareSerial.INTMAX_MAX
UINTMAX_MAX = _SoftwareSerial.UINTMAX_MAX
PTRDIFF_MIN = _SoftwareSerial.PTRDIFF_MIN
PTRDIFF_MAX = _SoftwareSerial.PTRDIFF_MAX
SIG_ATOMIC_MIN = _SoftwareSerial.SIG_ATOMIC_MIN
SIG_ATOMIC_MAX = _SoftwareSerial.SIG_ATOMIC_MAX
SIZE_MAX = _SoftwareSerial.SIZE_MAX
WINT_MIN = _SoftwareSerial.WINT_MIN
WINT_MAX = _SoftwareSerial.WINT_MAX
DEC = _SoftwareSerial.DEC
HEX = _SoftwareSerial.HEX
OCT = _SoftwareSerial.OCT
BIN = _SoftwareSerial.BIN
class Print(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Print, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Print, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getWriteError(self): return _SoftwareSerial.Print_getWriteError(self)
    def clearWriteError(self): return _SoftwareSerial.Print_clearWriteError(self)
    def write(self, *args): return _SoftwareSerial.Print_write(self, *args)
    def _print(self, *args): return _SoftwareSerial.Print__print(self, *args)
    def println(self, *args): return _SoftwareSerial.Print_println(self, *args)
    __swig_destroy__ = _SoftwareSerial.delete_Print
    __del__ = lambda self : None;
Print_swigregister = _SoftwareSerial.Print_swigregister
Print_swigregister(Print)

class Stream(Print):
    __swig_setmethods__ = {}
    for _s in [Print]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stream, name, value)
    __swig_getmethods__ = {}
    for _s in [Print]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Stream, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def available(self): return _SoftwareSerial.Stream_available(self)
    def read(self): return _SoftwareSerial.Stream_read(self)
    def peek(self): return _SoftwareSerial.Stream_peek(self)
    def flush(self): return _SoftwareSerial.Stream_flush(self)
    def setTimeout(self, *args): return _SoftwareSerial.Stream_setTimeout(self, *args)
    def find(self, *args): return _SoftwareSerial.Stream_find(self, *args)
    def findUntil(self, *args): return _SoftwareSerial.Stream_findUntil(self, *args)
    def parseInt(self): return _SoftwareSerial.Stream_parseInt(self)
    def parseFloat(self): return _SoftwareSerial.Stream_parseFloat(self)
    def readBytes(self, *args): return _SoftwareSerial.Stream_readBytes(self, *args)
    def readBytesUntil(self, *args): return _SoftwareSerial.Stream_readBytesUntil(self, *args)
    def readString(self): return _SoftwareSerial.Stream_readString(self)
    def readStringUntil(self, *args): return _SoftwareSerial.Stream_readStringUntil(self, *args)
    __swig_destroy__ = _SoftwareSerial.delete_Stream
    __del__ = lambda self : None;
Stream_swigregister = _SoftwareSerial.Stream_swigregister
Stream_swigregister(Stream)

_SS_MAX_RX_BUFF = _SoftwareSerial._SS_MAX_RX_BUFF
halfbit = _SoftwareSerial.halfbit
fullbit = _SoftwareSerial.fullbit
class SoftwareSerial(Stream):
    __swig_setmethods__ = {}
    for _s in [Stream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoftwareSerial, name, value)
    __swig_getmethods__ = {}
    for _s in [Stream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SoftwareSerial, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _SoftwareSerial.new_SoftwareSerial(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SoftwareSerial.delete_SoftwareSerial
    __del__ = lambda self : None;
    def begin(self, *args): return _SoftwareSerial.SoftwareSerial_begin(self, *args)
    def listen(self): return _SoftwareSerial.SoftwareSerial_listen(self)
    def end(self): return _SoftwareSerial.SoftwareSerial_end(self)
    def isListening(self): return _SoftwareSerial.SoftwareSerial_isListening(self)
    def overflow(self): return _SoftwareSerial.SoftwareSerial_overflow(self)
    def peek(self): return _SoftwareSerial.SoftwareSerial_peek(self)
    def read(self): return _SoftwareSerial.SoftwareSerial_read(self)
    def available(self): return _SoftwareSerial.SoftwareSerial_available(self)
    def flush(self): return _SoftwareSerial.SoftwareSerial_flush(self)
    def write(self, *args): return _SoftwareSerial.SoftwareSerial_write(self, *args)
    __swig_getmethods__["handle_interrupt"] = lambda x: _SoftwareSerial.SoftwareSerial_handle_interrupt
    if _newclass:handle_interrupt = staticmethod(_SoftwareSerial.SoftwareSerial_handle_interrupt)
SoftwareSerial_swigregister = _SoftwareSerial.SoftwareSerial_swigregister
SoftwareSerial_swigregister(SoftwareSerial)

def SoftwareSerial_handle_interrupt():
  return _SoftwareSerial.SoftwareSerial_handle_interrupt()
SoftwareSerial_handle_interrupt = _SoftwareSerial.SoftwareSerial_handle_interrupt

# This file is compatible with both classic and new-style classes.


