# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Arduino', [dirname(__file__)])
        except ImportError:
            import _Arduino
            return _Arduino
        if fp is not None:
            try:
                _mod = imp.load_module('_Arduino', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Arduino = swig_import_helper()
    del swig_import_helper
else:
    import _Arduino
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


_STDINT_H = _Arduino._STDINT_H
INT8_MIN = _Arduino.INT8_MIN
INT16_MIN = _Arduino.INT16_MIN
INT32_MIN = _Arduino.INT32_MIN
INT64_MIN = _Arduino.INT64_MIN
INT8_MAX = _Arduino.INT8_MAX
INT16_MAX = _Arduino.INT16_MAX
INT32_MAX = _Arduino.INT32_MAX
INT64_MAX = _Arduino.INT64_MAX
UINT8_MAX = _Arduino.UINT8_MAX
UINT16_MAX = _Arduino.UINT16_MAX
UINT32_MAX = _Arduino.UINT32_MAX
UINT64_MAX = _Arduino.UINT64_MAX
INT_LEAST8_MIN = _Arduino.INT_LEAST8_MIN
INT_LEAST16_MIN = _Arduino.INT_LEAST16_MIN
INT_LEAST32_MIN = _Arduino.INT_LEAST32_MIN
INT_LEAST64_MIN = _Arduino.INT_LEAST64_MIN
INT_LEAST8_MAX = _Arduino.INT_LEAST8_MAX
INT_LEAST16_MAX = _Arduino.INT_LEAST16_MAX
INT_LEAST32_MAX = _Arduino.INT_LEAST32_MAX
INT_LEAST64_MAX = _Arduino.INT_LEAST64_MAX
UINT_LEAST8_MAX = _Arduino.UINT_LEAST8_MAX
UINT_LEAST16_MAX = _Arduino.UINT_LEAST16_MAX
UINT_LEAST32_MAX = _Arduino.UINT_LEAST32_MAX
UINT_LEAST64_MAX = _Arduino.UINT_LEAST64_MAX
INT_FAST8_MIN = _Arduino.INT_FAST8_MIN
INT_FAST16_MIN = _Arduino.INT_FAST16_MIN
INT_FAST32_MIN = _Arduino.INT_FAST32_MIN
INT_FAST64_MIN = _Arduino.INT_FAST64_MIN
INT_FAST8_MAX = _Arduino.INT_FAST8_MAX
INT_FAST16_MAX = _Arduino.INT_FAST16_MAX
INT_FAST32_MAX = _Arduino.INT_FAST32_MAX
INT_FAST64_MAX = _Arduino.INT_FAST64_MAX
UINT_FAST8_MAX = _Arduino.UINT_FAST8_MAX
UINT_FAST16_MAX = _Arduino.UINT_FAST16_MAX
UINT_FAST32_MAX = _Arduino.UINT_FAST32_MAX
UINT_FAST64_MAX = _Arduino.UINT_FAST64_MAX
INTPTR_MIN = _Arduino.INTPTR_MIN
INTPTR_MAX = _Arduino.INTPTR_MAX
UINTPTR_MAX = _Arduino.UINTPTR_MAX
INTMAX_MIN = _Arduino.INTMAX_MIN
INTMAX_MAX = _Arduino.INTMAX_MAX
UINTMAX_MAX = _Arduino.UINTMAX_MAX
PTRDIFF_MIN = _Arduino.PTRDIFF_MIN
PTRDIFF_MAX = _Arduino.PTRDIFF_MAX
SIG_ATOMIC_MIN = _Arduino.SIG_ATOMIC_MIN
SIG_ATOMIC_MAX = _Arduino.SIG_ATOMIC_MAX
SIZE_MAX = _Arduino.SIZE_MAX
WINT_MIN = _Arduino.WINT_MIN
WINT_MAX = _Arduino.WINT_MAX
DEC = _Arduino.DEC
HEX = _Arduino.HEX
OCT = _Arduino.OCT
BIN = _Arduino.BIN
class Print(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Print, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Print, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def getWriteError(self): return _Arduino.Print_getWriteError(self)
    def clearWriteError(self): return _Arduino.Print_clearWriteError(self)
    def write(self, *args): return _Arduino.Print_write(self, *args)
    def _print(self, *args): return _Arduino.Print__print(self, *args)
    def println(self, *args): return _Arduino.Print_println(self, *args)
    __swig_destroy__ = _Arduino.delete_Print
    __del__ = lambda self : None;
Print_swigregister = _Arduino.Print_swigregister
Print_swigregister(Print)

class Stream(Print):
    __swig_setmethods__ = {}
    for _s in [Print]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Stream, name, value)
    __swig_getmethods__ = {}
    for _s in [Print]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Stream, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def available(self): return _Arduino.Stream_available(self)
    def read(self): return _Arduino.Stream_read(self)
    def peek(self): return _Arduino.Stream_peek(self)
    def flush(self): return _Arduino.Stream_flush(self)
    def setTimeout(self, *args): return _Arduino.Stream_setTimeout(self, *args)
    def find(self, *args): return _Arduino.Stream_find(self, *args)
    def findUntil(self, *args): return _Arduino.Stream_findUntil(self, *args)
    def parseInt(self): return _Arduino.Stream_parseInt(self)
    def parseFloat(self): return _Arduino.Stream_parseFloat(self)
    def readBytes(self, *args): return _Arduino.Stream_readBytes(self, *args)
    def readBytesUntil(self, *args): return _Arduino.Stream_readBytesUntil(self, *args)
    def readString(self): return _Arduino.Stream_readString(self)
    def readStringUntil(self, *args): return _Arduino.Stream_readStringUntil(self, *args)
    __swig_destroy__ = _Arduino.delete_Stream
    __del__ = lambda self : None;
Stream_swigregister = _Arduino.Stream_swigregister
Stream_swigregister(Stream)

class HardwareSerial(Stream):
    __swig_setmethods__ = {}
    for _s in [Stream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HardwareSerial, name, value)
    __swig_getmethods__ = {}
    for _s in [Stream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HardwareSerial, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Arduino.new_HardwareSerial(*args)
        try: self.this.append(this)
        except: self.this = this
    def begin(self, *args): return _Arduino.HardwareSerial_begin(self, *args)
    def end(self): return _Arduino.HardwareSerial_end(self)
    def available(self): return _Arduino.HardwareSerial_available(self)
    def peek(self): return _Arduino.HardwareSerial_peek(self)
    def read(self): return _Arduino.HardwareSerial_read(self)
    def flush(self): return _Arduino.HardwareSerial_flush(self)
    def write(self, *args): return _Arduino.HardwareSerial_write(self, *args)
    def __nonzero__(self):
        return _Arduino.HardwareSerial___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _Arduino.delete_HardwareSerial
    __del__ = lambda self : None;
HardwareSerial_swigregister = _Arduino.HardwareSerial_swigregister
HardwareSerial_swigregister(HardwareSerial)

SERIAL_5N1 = _Arduino.SERIAL_5N1
SERIAL_6N1 = _Arduino.SERIAL_6N1
SERIAL_7N1 = _Arduino.SERIAL_7N1
SERIAL_8N1 = _Arduino.SERIAL_8N1
SERIAL_5N2 = _Arduino.SERIAL_5N2
SERIAL_6N2 = _Arduino.SERIAL_6N2
SERIAL_7N2 = _Arduino.SERIAL_7N2
SERIAL_8N2 = _Arduino.SERIAL_8N2
SERIAL_5E1 = _Arduino.SERIAL_5E1
SERIAL_6E1 = _Arduino.SERIAL_6E1
SERIAL_7E1 = _Arduino.SERIAL_7E1
SERIAL_8E1 = _Arduino.SERIAL_8E1
SERIAL_5E2 = _Arduino.SERIAL_5E2
SERIAL_6E2 = _Arduino.SERIAL_6E2
SERIAL_7E2 = _Arduino.SERIAL_7E2
SERIAL_8E2 = _Arduino.SERIAL_8E2
SERIAL_5O1 = _Arduino.SERIAL_5O1
SERIAL_6O1 = _Arduino.SERIAL_6O1
SERIAL_7O1 = _Arduino.SERIAL_7O1
SERIAL_8O1 = _Arduino.SERIAL_8O1
SERIAL_5O2 = _Arduino.SERIAL_5O2
SERIAL_6O2 = _Arduino.SERIAL_6O2
SERIAL_7O2 = _Arduino.SERIAL_7O2
SERIAL_8O2 = _Arduino.SERIAL_8O2
HIGH = _Arduino.HIGH
LOW = _Arduino.LOW
INPUT = _Arduino.INPUT
OUTPUT = _Arduino.OUTPUT
LSBFIRST = _Arduino.LSBFIRST
MSBFIRST = _Arduino.MSBFIRST

def init():
  return _Arduino.init()
init = _Arduino.init

def pinMode(*args):
  return _Arduino.pinMode(*args)
pinMode = _Arduino.pinMode

def digitalWrite(*args):
  return _Arduino.digitalWrite(*args)
digitalWrite = _Arduino.digitalWrite

def digitalRead(*args):
  return _Arduino.digitalRead(*args)
digitalRead = _Arduino.digitalRead

def millis():
  return _Arduino.millis()
millis = _Arduino.millis

def micros():
  return _Arduino.micros()
micros = _Arduino.micros

def delay(*args):
  return _Arduino.delay(*args)
delay = _Arduino.delay

def delayMicroseconds(*args):
  return _Arduino.delayMicroseconds(*args)
delayMicroseconds = _Arduino.delayMicroseconds

def pulseIn(*args):
  return _Arduino.pulseIn(*args)
pulseIn = _Arduino.pulseIn

def shiftOut(*args):
  return _Arduino.shiftOut(*args)
shiftOut = _Arduino.shiftOut

def shiftIn(*args):
  return _Arduino.shiftIn(*args)
shiftIn = _Arduino.shiftIn
# This file is compatible with both classic and new-style classes.

cvar = _Arduino.cvar

