# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SPI', [dirname(__file__)])
        except ImportError:
            import _SPI
            return _SPI
        if fp is not None:
            try:
                _mod = imp.load_module('_SPI', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _SPI = swig_import_helper()
    del swig_import_helper
else:
    import _SPI
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


_STDINT_H = _SPI._STDINT_H
INT8_MIN = _SPI.INT8_MIN
INT16_MIN = _SPI.INT16_MIN
INT32_MIN = _SPI.INT32_MIN
INT64_MIN = _SPI.INT64_MIN
INT8_MAX = _SPI.INT8_MAX
INT16_MAX = _SPI.INT16_MAX
INT32_MAX = _SPI.INT32_MAX
INT64_MAX = _SPI.INT64_MAX
UINT8_MAX = _SPI.UINT8_MAX
UINT16_MAX = _SPI.UINT16_MAX
UINT32_MAX = _SPI.UINT32_MAX
UINT64_MAX = _SPI.UINT64_MAX
INT_LEAST8_MIN = _SPI.INT_LEAST8_MIN
INT_LEAST16_MIN = _SPI.INT_LEAST16_MIN
INT_LEAST32_MIN = _SPI.INT_LEAST32_MIN
INT_LEAST64_MIN = _SPI.INT_LEAST64_MIN
INT_LEAST8_MAX = _SPI.INT_LEAST8_MAX
INT_LEAST16_MAX = _SPI.INT_LEAST16_MAX
INT_LEAST32_MAX = _SPI.INT_LEAST32_MAX
INT_LEAST64_MAX = _SPI.INT_LEAST64_MAX
UINT_LEAST8_MAX = _SPI.UINT_LEAST8_MAX
UINT_LEAST16_MAX = _SPI.UINT_LEAST16_MAX
UINT_LEAST32_MAX = _SPI.UINT_LEAST32_MAX
UINT_LEAST64_MAX = _SPI.UINT_LEAST64_MAX
INT_FAST8_MIN = _SPI.INT_FAST8_MIN
INT_FAST16_MIN = _SPI.INT_FAST16_MIN
INT_FAST32_MIN = _SPI.INT_FAST32_MIN
INT_FAST64_MIN = _SPI.INT_FAST64_MIN
INT_FAST8_MAX = _SPI.INT_FAST8_MAX
INT_FAST16_MAX = _SPI.INT_FAST16_MAX
INT_FAST32_MAX = _SPI.INT_FAST32_MAX
INT_FAST64_MAX = _SPI.INT_FAST64_MAX
UINT_FAST8_MAX = _SPI.UINT_FAST8_MAX
UINT_FAST16_MAX = _SPI.UINT_FAST16_MAX
UINT_FAST32_MAX = _SPI.UINT_FAST32_MAX
UINT_FAST64_MAX = _SPI.UINT_FAST64_MAX
INTPTR_MIN = _SPI.INTPTR_MIN
INTPTR_MAX = _SPI.INTPTR_MAX
UINTPTR_MAX = _SPI.UINTPTR_MAX
INTMAX_MIN = _SPI.INTMAX_MIN
INTMAX_MAX = _SPI.INTMAX_MAX
UINTMAX_MAX = _SPI.UINTMAX_MAX
PTRDIFF_MIN = _SPI.PTRDIFF_MIN
PTRDIFF_MAX = _SPI.PTRDIFF_MAX
SIG_ATOMIC_MIN = _SPI.SIG_ATOMIC_MIN
SIG_ATOMIC_MAX = _SPI.SIG_ATOMIC_MAX
SIZE_MAX = _SPI.SIZE_MAX
WINT_MIN = _SPI.WINT_MIN
WINT_MAX = _SPI.WINT_MAX
SPI_CLOCK_DIV4 = _SPI.SPI_CLOCK_DIV4
SPI_CLOCK_DIV16 = _SPI.SPI_CLOCK_DIV16
SPI_CLOCK_DIV64 = _SPI.SPI_CLOCK_DIV64
SPI_CLOCK_DIV128 = _SPI.SPI_CLOCK_DIV128
SPI_CLOCK_DIV2 = _SPI.SPI_CLOCK_DIV2
SPI_CLOCK_DIV8 = _SPI.SPI_CLOCK_DIV8
SPI_CLOCK_DIV32 = _SPI.SPI_CLOCK_DIV32
class SPIClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SPIClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SPIClass, name)
    __repr__ = _swig_repr
    __swig_getmethods__["transfer"] = lambda x: _SPI.SPIClass_transfer
    if _newclass:transfer = staticmethod(_SPI.SPIClass_transfer)
    __swig_getmethods__["begin"] = lambda x: _SPI.SPIClass_begin
    if _newclass:begin = staticmethod(_SPI.SPIClass_begin)
    __swig_getmethods__["end"] = lambda x: _SPI.SPIClass_end
    if _newclass:end = staticmethod(_SPI.SPIClass_end)
    __swig_getmethods__["setBitOrder"] = lambda x: _SPI.SPIClass_setBitOrder
    if _newclass:setBitOrder = staticmethod(_SPI.SPIClass_setBitOrder)
    __swig_getmethods__["setDataMode"] = lambda x: _SPI.SPIClass_setDataMode
    if _newclass:setDataMode = staticmethod(_SPI.SPIClass_setDataMode)
    __swig_getmethods__["setClockDivider"] = lambda x: _SPI.SPIClass_setClockDivider
    if _newclass:setClockDivider = staticmethod(_SPI.SPIClass_setClockDivider)
    def __init__(self): 
        this = _SPI.new_SPIClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _SPI.delete_SPIClass
    __del__ = lambda self : None;
SPIClass_swigregister = _SPI.SPIClass_swigregister
SPIClass_swigregister(SPIClass)
cvar = _SPI.cvar

def SPIClass_transfer(*args):
  return _SPI.SPIClass_transfer(*args)
SPIClass_transfer = _SPI.SPIClass_transfer

def SPIClass_begin():
  return _SPI.SPIClass_begin()
SPIClass_begin = _SPI.SPIClass_begin

def SPIClass_end():
  return _SPI.SPIClass_end()
SPIClass_end = _SPI.SPIClass_end

def SPIClass_setBitOrder(*args):
  return _SPI.SPIClass_setBitOrder(*args)
SPIClass_setBitOrder = _SPI.SPIClass_setBitOrder

def SPIClass_setDataMode(*args):
  return _SPI.SPIClass_setDataMode(*args)
SPIClass_setDataMode = _SPI.SPIClass_setDataMode

def SPIClass_setClockDivider(*args):
  return _SPI.SPIClass_setClockDivider(*args)
SPIClass_setClockDivider = _SPI.SPIClass_setClockDivider

# This file is compatible with both classic and new-style classes.


